# Do not modify this file!	It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.	Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
	imports =
		[ (modulesPath + "/installer/scan/not-detected.nix")
		];

	networking.hostName = "harmony";

	boot = {
		initrd.availableKernelModules = [ "xhci_pci" "nvme" "usb_storage" "usbhid" "sd_mod" "sdhci_pci" ];
		initrd.kernelModules = [ ];
		kernelModules = [ "kvm-intel" ];
		extraModulePackages = [ ];
	};

	fileSystems = {
		"/" = { device = "/dev/disk/by-uuid/15d0b22e-decb-4c41-b844-a0f6df0330a2";
				fsType = "btrfs";
				options = [ "compress=zstd,ssd,noatime,space_cache=v2,subvol=nix-root" ];
			};
		"/nix" = { device = "/dev/disk/by-uuid/15d0b22e-decb-4c41-b844-a0f6df0330a2";
				fsType = "btrfs";
				options = [ "compress=zstd,ssd,noatime,space_cache=v2,subvol=nix-nix" ];
			};
		"/home" = { device = "/dev/disk/by-uuid/15d0b22e-decb-4c41-b844-a0f6df0330a2";
				fsType = "btrfs";
				options = [ "compress=zstd,ssd,noatime,space_cache=v2,subvol=@home" ];
			};
		"/boot" = { device = "/dev/disk/by-uuid/8620-32A3";
				fsType = "vfat";
			};
	};

	swapDevices = [ ];

	# Enables DHCP on each ethernet and wireless interface. In case of scripted networking
	# (the default) this is the recommended approach. When using systemd-networkd it's
	# still possible to use this option, but it's recommended to use it in conjunction
	# with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
	networking.useDHCP = lib.mkDefault true;
	# networking.interfaces.wlo1.useDHCP = lib.mkDefault true;

	nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
	powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
	hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

	hardware = {
		bluetooth = {
			enable = true;
			powerOnBoot = true;
		};
		opengl = {
			enable = true;
			driSupport = true;
		};
	};

	# Power management
	services.system76-scheduler.settings.cfsProfiles.enable = true;
	services.tlp = {
		enable = true;
		settings = {
			CPU_BOOST_ON_AC = 1;
			CPU_BOOST_ON_BAT = 0;
			CPU_SCALING_GOVERNOR_ON_AC = "performance";
			CPU_SCALING_GOVERNOR_ON_BAT = "powersave";
		};
	};
	services.power-profiles-daemon.enable = false;
	powerManagement.powertop.enable = true;
	services.thermald.enable = true;

	# Enable the battery charge threshold
	systemd.services.battery-charge-threshold = {
		enable = true;
		description = "Set the battery charge threshold";
		after = [ "multi-user.target" ];
		unitConfig = {
			After = "multi-user.target";
			StartLimitBurst = 0;
		};
		serviceConfig = {
			Type = "oneshot";
			Restart = "on-failure";
			ExecStart = "/bin/sh -c 'echo 90 >/sys/class/power_supply/BAT0/charge_control_end_threshold'";
		};
		wantedBy = [ "multi-user.target" ];
	};
}

# vim: ts=4
